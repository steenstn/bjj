{"version":3,"sources":["components/LoginForm.js","components/moves/MovesList.js","components/moves/MoveForm.js","components/moves/MoveComponent.js","components/trainingsessions/TrainingSessionForm.js","components/trainingsessions/TrainingSessionsList.js","components/trainingsessions/TrainingSessionComponent.js","components/Dashboard.js","components/RegistrationForm.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["LoginForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","bind","assertThisInitialized","state","connectedToBackend","loginSuccessful","errorMessage","_this2","fetch","process","then","result","status","setState","event","_this3","preventDefault","data","FormData","target","object","forEach","value","key","json","JSON","stringify","method","body","headers","Content-Type","response","_ref","ok","localStorage","setItem","token","history","push","error","console","log","react_default","a","createElement","class","onSubmit","TextField_default","id","label","name","type","Button_default","variant","Link","to","Component","MovesList","toggleVisible","newShowItems","showItems","slice","moves","map","m","index","onClick","description","MoveForm","getItem","Authorization","concat","res","handleForm","current","reset","render","ref","htmlFor","React","createRef","MoveComponent","moves_MoveForm","moves_MovesList","TrainingSessionForm","inputErrorLengthMin","inputErrorDate","onNewTrainingSession","inputValidationMinutes","input","test","lengthMin","inputValidationDate","date","currentDate","Date","es","selected","onChange","dateFormat","style","color","TrainingSessionsList","handleDelete","updatedList","sessions","filter","session","deleteDialogOpen","openDeleteDialog","sessionID","closeDeleteDialog","_this$state","className","trainingType","Dialog_default","open","onClose","aria-describedby","DialogContent_default","DialogContentText_default","DialogActions_default","isLoaded","TrainingSessionComponent","componentDidMount","handleNewTrainingSession","trainingSession","newSessions","trainingsessions_TrainingSessionForm","trainingsessions_TrainingSessionsList","Dashboard","moves_MoveComponent","trainingsessions_TrainingSessionComponent","RegistrationForm","registrationSuccessful","message","Main","Switch","Route","path","component","exact","App","components_Main","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3390df6f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport './LoginForm.css';\r\n\r\nclass LoginForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.state = {\r\n            connectedToBackend: false,\r\n            loginSuccessful: false,\r\n            errorMessage: \"\"\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        fetch(process.env.REACT_APP_BACKEND_URL + \"/test\")\r\n          .then(\r\n            (result) => {\r\n                if(result.status === 200) {\r\n                    this.setState( {connectedToBackend: true});\r\n                }\r\n            }\r\n          )\r\n    }\r\n    \r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        const data = new FormData(event.target);\r\n        var object = {};\r\n        data.forEach(function(value, key){\r\n            object[key] = value;\r\n        });\r\n        var json = JSON.stringify(object);\r\n        fetch(process.env.REACT_APP_BACKEND_URL + \"/user/login\", {\r\n            method: 'POST',\r\n            body: json,\r\n            headers: {\r\n                \"Content-Type\": \"application/json; charset=utf-8\",\r\n            },\r\n          })\r\n          .then(response => response.json().then((json) => ({json, response})))\r\n          .then(({json, response}) => {\r\n          if (!response.ok) {\r\n                this.setState({ errorMessage: \"Invalid username or password\", loginSuccessful: false })\r\n            }\r\n            else {\r\n                localStorage.setItem(\"token\", json.token);\r\n                this.setState({loginSuccessful: true})\r\n                this.props.history.push('/dashboard');\r\n            }\r\n        },\r\n            error => {\r\n              console.log(\"error\", error);\r\n            }\r\n          );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div class=\"center\">\r\n                <p>{this.state.connectedToBackend ? \"Connected\" : \"Connecting..\"}</p>\r\n                <form onSubmit={this.handleSubmit}>\r\n                <TextField id=\"username\" label=\"Username\" name=\"username\" type=\"text\"/>\r\n                <br />\r\n                <TextField id=\"password\" label=\"Password\" name=\"password\" type=\"password\" />\r\n                <br /><br />\r\n                <Button variant=\"outlined\" type=\"submit\">Login</Button>\r\n                </form>\r\n                <Link to=\"/register\">Register</Link>\r\n                <p>{this.state.loginSuccessful ? \"Login successful\" : this.state.errorMessage}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginForm;","import React, { Component } from 'react';\r\n\r\nclass MovesList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {showItems: []};\r\n    }\r\n\r\n    toggleVisible = (id)  => {\r\n        let newShowItems = this.state.showItems.slice();\r\n        newShowItems[id] = !newShowItems[id];\r\n        this.setState({ showItems: newShowItems });\r\n    }\r\n    \r\n    render() {\r\n        const moves = this.props.moves;\r\n        return (\r\n            <div>\r\n                <ul>\r\n                {moves.map((m,index) => (\r\n                    <li \r\n                        key={m.id} \r\n                        onClick= { () => this.toggleVisible(index)}>\r\n                    {m.name}{this.state.showItems[index] ? \": \" + m.description : \"\"}\r\n                    </li>))}\r\n                </ul>\r\n            </div>);\r\n    }\r\n}\r\n\r\nexport default MovesList;","import React, { Component } from 'react';\r\n\r\nclass MoveForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleForm = React.createRef();\r\n\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.target);\r\n        var object = {};\r\n        data.forEach(function (value, key) {\r\n            object[key] = value;\r\n        });\r\n        \r\n        var json = JSON.stringify(object);\r\n        let token = localStorage.getItem(\"token\");\r\n        fetch(process.env.REACT_APP_BACKEND_URL + \"/moves/new\", {\r\n            method: 'POST',\r\n            body: json,\r\n            headers: {\r\n                \"Content-Type\": \"application/json; charset=utf-8\",\r\n                \"Authorization\": `Bearer ${token}`\r\n            },\r\n            })\r\n            .then(res => res.json())\r\n            \r\n            .then(this.handleForm.current.reset());\r\n    }\r\n\r\n    render = () => {\r\n        return (<form onSubmit={this.handleSubmit} ref={this.handleForm}>\r\n                    <label htmlFor=\"name\">Name</label>\r\n                    <input id=\"name\" name=\"name\" type=\"text\" />\r\n                    <label htmlFor=\"description\">Description</label>\r\n                    <input id=\"description\" name=\"description\" type=\"text\" />\r\n                    <button>Add move</button>\r\n                </form>);\r\n\r\n    }\r\n}\r\n\r\nexport default MoveForm;","import React, { Component } from 'react';\r\nimport MovesList from './MovesList';\r\nimport MoveForm from './MoveForm';\r\n\r\nclass MoveComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {moves: []};\r\n    }\r\n\r\n    \r\n    componentDidMount() {\r\n        let token = localStorage.getItem(\"token\");\r\n        fetch(process.env.REACT_APP_BACKEND_URL + \"/moves\", {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        }).then(res => res.json())\r\n        .then((result) => {\r\n            this.setState({moves: result});\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <MoveForm />\r\n                <MovesList moves={this.state.moves}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MoveComponent;","import React, { Component } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass TrainingSessionForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleForm = React.createRef();\r\n        this.state = {\r\n            lengthMin: 75,\r\n            inputErrorLengthMin: false,\r\n            inputErrorDate: false,\r\n            currentDate: new Date()\r\n        }\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(this.state.inputErrorLengthMin || this.state.inputErrorDate) {  \r\n            return;        \r\n        }\r\n        const data = new FormData(event.target);\r\n        var object = {};\r\n        data.forEach(function (value, key) {\r\n            object[key] = value;\r\n        });\r\n        var json = JSON.stringify(object);\r\n        let token = localStorage.getItem(\"token\");\r\n        fetch(process.env.REACT_APP_BACKEND_URL + \"/trainingsessions/new\", {\r\n            method: 'POST',\r\n            body: json,\r\n            headers: {\r\n                \"Content-Type\": \"application/json; charset=utf-8\",\r\n                \"Authorization\": `Bearer ${token}`\r\n            },\r\n          }).then(res => res.json())\r\n          .then(\r\n            (result) => {\r\n              this.props.onNewTrainingSession(result);\r\n            })\r\n            .then(this.handleForm.current.reset());\r\n    }\r\n\r\n        \r\n\r\n    inputValidationMinutes = (event) => {\r\n        event.preventDefault();\r\n        let input = event.target.value;\r\n        if (!(/^(|[1-9][0-9]*)$/.test(input)) || input === \"\") {\r\n            this.setState({ inputErrorLengthMin: true })\r\n        } else {\r\n            this.setState({ inputErrorLengthMin: false })\r\n        }\r\n        this.setState({ lengthMin: event.target.value });\r\n    }\r\n\r\n    inputValidationDate = (date) => {\r\n        if(date === null) {\r\n            this.setState({\r\n                inputErrorDate: true,\r\n                currentDate: date\r\n            });\r\n        } else {\r\n            this.setState({\r\n                inputErrorDate: false,\r\n                currentDate: date\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} ref={this.handleForm}>\r\n                <label htmlFor=\"date\">Date</label>\r\n                <DatePicker \r\n                    id=\"date\"\r\n                    name=\"date\"\r\n                    selected={this.state.currentDate}\r\n                    onChange={this.inputValidationDate}\r\n                    dateFormat=\"yyyy-MM-dd\"/>\r\n                <label htmlFor=\"length\">Length(min)</label>\r\n                <input id=\"lengthMin\" name=\"lengthMin\" value={this.state.lengthMin} type=\"text\" onChange={this.inputValidationMinutes} />\r\n                <label htmlFor=\"trainingType\">Training type</label>\r\n                <select id=\"trainingType\" name=\"trainingType\">\r\n                    <option value=\"GI\">GI</option>\r\n                    <option value=\"NO_GI\">NO_GI</option>\r\n                    <option value=\"OPEN_MAT\">OPEN_MAT</option>\r\n                </select>\r\n                <button>Add session</button>\r\n                {this.state.inputErrorLengthMin && <p style={{color: \"red\"}}>Length must be an integer (above 0).</p>}\r\n                {this.state.inputErrorDate && <p style={{color: \"red\"}}>Please pick a date.</p>}\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TrainingSessionForm;","import React, { Component } from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport './TrainingSessionList.css';\r\n\r\nclass TrainingSessionsList extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n        this.state = {\r\n          error: null,\r\n          isLoaded: false,\r\n          sessions: [],\r\n          deleteDialogOpen: false,\r\n          sessionID: \"\"\r\n        };\r\n    }\r\n  \r\n    handleDelete = (id) => {\r\n      let token = localStorage.getItem(\"token\");\r\n      fetch(process.env.REACT_APP_BACKEND_URL + `/trainingsessions/${id}/delete`, {\r\n          method: 'POST',\r\n          headers: {\r\n            \"Authorization\": `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json; charset=utf-8\"\r\n          }\r\n      })\r\n        .then(() => {\r\n          const updatedList = this.state.sessions.filter(session => session.id !== id)\r\n          this.setState({sessions: updatedList, deleteDialogOpen: false})\r\n      })\r\n    }\r\n  \r\n    openDeleteDialog = (id) => {\r\n      this.setState({ deleteDialogOpen: true, sessionID: id });\r\n    }\r\n  \r\n    closeDeleteDialog = () => {\r\n      this.setState({ deleteDialogOpen: false });\r\n    }\r\n  \r\n      render = () => {\r\n        let sessions = this.props.sessions;\r\n        const { deleteDialogOpen, sessionID } = this.state;\r\n        if (!sessions) {\r\n          return <div>Loading...</div>;\r\n        } else {\r\n          return (\r\n            <div>\r\n              <ul className=\"list\">\r\n                {sessions.map(session => (\r\n                    <li className=\"listEntry\" key={session.id}>\r\n                    {session.date} Type: {session.trainingType} Length: {session.lengthMin} min<button className=\"deleteButton\" onClick={() => this.openDeleteDialog(session.id)} key={session.id}>x</button>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n              <Dialog open={deleteDialogOpen} onClose={this.closeDeleteDialog} aria-describedby=\"alert-dialog-description\">\r\n                <DialogContent><DialogContentText id=\"alert-dialog-description\">Are you sure you want to delete this training session?</DialogContentText></DialogContent>\r\n                <DialogActions>\r\n                  <button onClick={this.closeDeleteDialog}>No, keep this session</button>\r\n                  <button onClick={() => this.handleDelete(sessionID)}>Yes, delete this session</button>\r\n                </DialogActions>\r\n              </Dialog>\r\n            </div>);\r\n        }\r\n      }\r\n    }\r\n    \r\n    export default TrainingSessionsList;\r\n    ","import React, { Component } from 'react';\r\nimport TrainingSessionForm from './TrainingSessionForm';\r\nimport TrainingSessionList from './TrainingSessionsList';\r\n\r\nclass TrainingSessionComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: false,\r\n            isLoaded: false,\r\n            sessions: []\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let token = localStorage.getItem(\"token\");\r\n          fetch(process.env.REACT_APP_BACKEND_URL + \"/trainingsessions\", {\r\n            method: 'GET',\r\n            headers: {\r\n                \"Authorization\": `Bearer ${token}`\r\n            },\r\n          })\r\n            .then(res => res.json())\r\n            .then(\r\n              (result) => {\r\n                this.setState({\r\n                  isLoaded: true,\r\n                  sessions: result\r\n                });\r\n              },\r\n              // Note: it's important to handle errors here\r\n              // instead of a catch() block so that we don't swallow\r\n              // exceptions from actual bugs in components.\r\n              (error) => {\r\n                this.setState({\r\n                  isLoaded: true,\r\n                  error: true\r\n                });\r\n              }\r\n            )\r\n    }  \r\n\r\n    handleNewTrainingSession = (trainingSession) => {\r\n        let newSessions = this.state.sessions.slice();\r\n        newSessions.push(trainingSession);\r\n        this.setState({sessions: newSessions});\r\n    }\r\n\r\n    render = () => {\r\n        if(this.state.error) {\r\n            return (<div><TrainingSessionForm onNewTrainingSession={this.handleNewTrainingSession}/><p>Could not load training sessions..</p></div>)\r\n        } else {\r\n            return (<div><TrainingSessionForm onNewTrainingSession={this.handleNewTrainingSession}/><TrainingSessionList sessions={this.state.sessions}/></div>);\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default TrainingSessionComponent;","import React, { Component } from 'react';\r\nimport MoveComponent from './moves/MoveComponent';\r\nimport TrainingSessionComponent from './trainingsessions/TrainingSessionComponent';\r\n\r\nclass Dashboard extends Component {\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n            <p>Moves</p>\r\n            <MoveComponent />\r\n            <TrainingSessionComponent />\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Dashboard","import React, { Component } from 'react';\r\n\r\nclass RegistrationForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.state = {\r\n            registrationSuccessful: false,\r\n            errorMessage: \"\"\r\n        }\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        const data = new FormData(event.target);\r\n        var object = {};\r\n        data.forEach(function (value, key){\r\n            object[key] = value;\r\n        });\r\n        var json = JSON.stringify(object);\r\n        fetch(process.env.REACT_APP_BACKEND_URL + \"/user/register\", {\r\n            method: 'POST',\r\n            body: json,\r\n            headers: {\r\n                \"Content-Type\": \"application/json; charset=utf-8\",\r\n            }\r\n        })\r\n            .then(response => response.json().then((json) => ({json, response})))\r\n            .then(({json, response}) => {\r\n                if (!response.ok) {\r\n                    this.setState({ errorMessage: json.message, registrationSuccessful: false })\r\n                }\r\n                else {\r\n                    this.setState({ registrationSuccessful: true })\r\n                }\r\n            },\r\n            error => {\r\n                    console.log(\"error\", error);\r\n                  }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>Username</label>\r\n                    <input id=\"username\" name=\"username\" type=\"text\"/>\r\n                    <label>Password</label>\r\n                    <input id=\"password\" name=\"password\" type=\"password\" />\r\n                    <button>Register</button>\r\n                </form>\r\n                <p>{this.state.registrationSuccessful ? \"Registration successful\" : this.state.errorMessage}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RegistrationForm;","import React from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport LoginForm from './LoginForm'\r\nimport Dashboard from './Dashboard'\r\nimport RegistrationForm from './RegistrationForm'\r\n\r\nconst Main = () => (\r\n  <main>\r\n    <Switch>\r\n      <Route path='https://steenstn.github.io/bjj' component={LoginForm}/>\r\n      <Route path='/bjj' component={LoginForm}/>\r\n      <Route exact path='/' component={LoginForm} />\r\n      <Route path='/register' component={RegistrationForm}/>\r\n      <Route path='https://steenstn.github.io/bjj/dashboard' component={Dashboard}/>\r\n      <Route path='/dashboard' component={Dashboard}/>\r\n    </Switch>\r\n  </main>\r\n)\r\n\r\nexport default Main\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Main from './Main';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Main />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}