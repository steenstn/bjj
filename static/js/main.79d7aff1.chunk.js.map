{"version":3,"sources":["components/LoginForm.js","components/TrainingSessionForm.js","components/TrainingSessionsList.js","components/Dashboard.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["LoginForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","bind","assertThisInitialized","state","connectedToBackend","_this2","fetch","then","result","status","setState","event","_this3","preventDefault","data","FormData","target","object","forEach","value","key","json","JSON","stringify","method","body","headers","Content-Type","res","localStorage","setItem","token","console","log","history","push","error","react_default","a","createElement","onSubmit","id","name","type","Component","TrainingSessionForm","getItem","Authorization","concat","htmlFor","TrainingSessionsList","isLoaded","sessions","_this$state","message","map","session","date","trainingType","lengthMin","Dashboard","components_TrainingSessionForm","components_TrainingSessionsList","Main","Switch","Route","path","component","exact","App","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.79d7aff1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass LoginForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.state = {\r\n            connectedToBackend: false\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        fetch(\"https://bjjtraining-dev.herokuapp.com/test\")\r\n          .then(\r\n            (result) => {\r\n                if(result.status === 200) {\r\n                    this.setState( {connectedToBackend: true});\r\n                }\r\n            }\r\n          )\r\n    }\r\n    \r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        const data = new FormData(event.target);\r\n        var object = {};\r\n        data.forEach(function(value, key){\r\n            object[key] = value;\r\n        });\r\n        var json = JSON.stringify(object);\r\n        fetch('https://bjjtraining-dev.herokuapp.com/user/login', {\r\n            method: 'POST',\r\n            body: json,\r\n            headers: {\r\n                \"Content-Type\": \"application/json; charset=utf-8\",\r\n            },\r\n          })\r\n          .then(res => res.json())\r\n          .then(\r\n            (result) => {\r\n              localStorage.setItem(\"token\", result.token);\r\n              console.log(\"yay\", result);\r\n              this.props.history.push('/dashboard');\r\n            },\r\n            (error) => {\r\n              console.log(\"error\", error);\r\n            }\r\n          );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <p>{this.state.connectedToBackend ? \"Connected\" : \"Connecting..\"}</p>\r\n                <form onSubmit={this.handleSubmit}>\r\n                <label>Username</label>\r\n                <input id=\"username\" name=\"username\" type=\"text\"/>\r\n                <label>Password</label>\r\n                <input id=\"password\" name=\"password\" type=\"password\" />\r\n                <button>Login</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginForm;","import React, { Component } from 'react';\r\n\r\nclass TrainingSessionForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        const data = new FormData(event.target);\r\n        var object = {};\r\n        data.forEach(function(value, key){\r\n            object[key] = value;\r\n        });\r\n        var json = JSON.stringify(object);\r\n        let token = localStorage.getItem(\"token\");\r\n        fetch('https://bjjtraining-dev.herokuapp.com/trainingsessions/new', {\r\n            method: 'POST',\r\n            body: json,\r\n            headers: {\r\n                \"Content-Type\": \"application/json; charset=utf-8\",\r\n                \"Authorization\": `Bearer ${token}`\r\n            },\r\n          });\r\n        \r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n            <label htmlFor=\"date\">Date</label>\r\n            <input id=\"date\" name=\"date\" type=\"text\"/>\r\n            <label htmlFor=\"length\">Length(min)</label>\r\n            <input id=\"lengthMin\" name=\"lengthMin\" type=\"text\" />\r\n            <label htmlFor=\"trainingType\">Training type</label>\r\n            \r\n            <input id=\"trainingType\" name=\"trainingType\" type=\"text\" />\r\n            \r\n            <button>Add session</button>\r\n            </form>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default TrainingSessionForm;","import React, { Component } from 'react';\r\n\r\nclass TrainingSessionsList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          error: null,\r\n          isLoaded: false,\r\n          sessions: []\r\n        };\r\n      }\r\n    componentDidMount() {\r\n      let token = localStorage.getItem(\"token\");\r\n        fetch(\"https://bjjtraining-dev.herokuapp.com/trainingsessions\", {\r\n          method: 'GET',\r\n          headers: {\r\n              \"Authorization\": `Bearer ${token}`\r\n          },\r\n        })\r\n          .then(res => res.json())\r\n          .then(\r\n            (result) => {\r\n              this.setState({\r\n                isLoaded: true,\r\n                sessions: result\r\n              });\r\n            },\r\n            // Note: it's important to handle errors here\r\n            // instead of a catch() block so that we don't swallow\r\n            // exceptions from actual bugs in components.\r\n            (error) => {\r\n              this.setState({\r\n                isLoaded: true,\r\n                error\r\n              });\r\n            }\r\n          )\r\n      }\r\n      render() {\r\n        const { error, isLoaded, sessions } = this.state;\r\n        if (error) {\r\n          return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n          return <div>Loading...</div>;\r\n        } else {\r\n          return (\r\n            <ul>\r\n              {sessions.map(session => (\r\n                <li>\r\n                  {session.id} {session.date} {session.trainingType} {session.lengthMin}\r\n                </li>\r\n              ))}\r\n            </ul>);\r\n        }\r\n      }\r\n    }\r\n    \r\n    export default TrainingSessionsList;\r\n    ","import React, { Component } from 'react';\r\nimport TrainingSessionForm from './TrainingSessionForm';\r\nimport TrainingSessionsList from './TrainingSessionsList';\r\n\r\nclass Dashboard extends Component {\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n            <TrainingSessionForm />\r\n            <TrainingSessionsList />\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Dashboard","import React from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport LoginForm from './LoginForm'\r\nimport Dashboard from './Dashboard'\r\n\r\nconst Main = () => (\r\n  <main>\r\n    <Switch>\r\n      <Route path='https://steenstn.github.io/bjj' component={LoginForm}/>\r\n      <Route path='/bjj' component={LoginForm}/>\r\n      <Route exact path='/' component={LoginForm}/>\r\n      <Route path='https://steenstn.github.io/bjj/dashboard' component={Dashboard}/>\r\n      <Route path='/dashboard' component={Dashboard}/>\r\n    </Switch>\r\n  </main>\r\n)\r\n\r\nexport default Main\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Main from './Main';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n      <Main />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}