{"version":3,"sources":["components/TrainingSessionForm.js","components/TrainingSessionsList.js","components/App.js","serviceWorker.js","index.js"],"names":["TrainingSessionForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","bind","assertThisInitialized","event","preventDefault","data","FormData","target","object","forEach","value","key","json","JSON","stringify","fetch","method","body","headers","Content-Type","react_default","a","createElement","onSubmit","htmlFor","id","name","type","Component","TrainingSessionsList","state","error","isLoaded","sessions","_this2","then","res","result","setState","_this$state","message","map","session","date","trainingType","lengthMin","App","components_TrainingSessionForm","components_TrainingSessionsList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wOA4CeA,cAzCX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAFLA,4EAKNU,GACTA,EAAMC,iBACN,IAAMC,EAAO,IAAIC,SAASH,EAAMI,QAC5BC,EAAS,GACbH,EAAKI,QAAQ,SAASC,EAAOC,GACzBH,EAAOG,GAAOD,IAElB,IAAIE,EAAOC,KAAKC,UAAUN,GAC1BO,MAAM,yDAA0D,CAC5DC,OAAQ,OACRC,KAAML,EACNM,QAAS,CACLC,eAAgB,sEAOxB,OACIC,EAAAC,EAAAC,cAAA,QAAMC,SAAU3B,KAAKI,cACrBoB,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,QAAf,QACAJ,EAAAC,EAAAC,cAAA,SAAOG,GAAG,OAAOC,KAAK,OAAOC,KAAK,SAClCP,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,UAAf,eACAJ,EAAAC,EAAAC,cAAA,SAAOG,GAAG,YAAYC,KAAK,YAAYC,KAAK,SAC5CP,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,gBAAf,iBAEAJ,EAAAC,EAAAC,cAAA,SAAOG,GAAG,eAAeC,KAAK,eAAeC,KAAK,SAElDP,EAAAC,EAAAC,cAAA,qCAnCsBM,aCiDfC,cAhDf,SAAAA,EAAYrC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiC,IACfpC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmC,GAAA9B,KAAAH,KAAMJ,KACDsC,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,SAAU,IALGxC,mFAQC,IAAAyC,EAAAtC,KAChBmB,MAAM,sDACHoB,KAAK,SAAAC,GAAG,OAAIA,EAAIxB,SAChBuB,KACC,SAACE,GACCH,EAAKI,SAAS,CACZN,UAAU,EACVC,SAAUI,KAMd,SAACN,GACCG,EAAKI,SAAS,CACZN,UAAU,EACVD,6CAKD,IAAAQ,EAC+B3C,KAAKkC,MAAnCC,EADDQ,EACCR,MAAOC,EADRO,EACQP,SAAUC,EADlBM,EACkBN,SACzB,OAAIF,EACKX,EAAAC,EAAAC,cAAA,qBAAaS,EAAMS,SAChBR,EAIRZ,EAAAC,EAAAC,cAAA,UACGW,EAASQ,IAAI,SAAAC,GAAO,OACnBtB,EAAAC,EAAAC,cAAA,UACGoB,EAAQjB,GADX,IACgBiB,EAAQC,KADxB,IAC+BD,EAAQE,aADvC,IACsDF,EAAQG,cAN7DzB,EAAAC,EAAAC,cAAA,gCAnCkBM,aCkBpBkB,cAdb,SAAAA,EAAYtD,GAAQ,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAkD,GAAApD,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoD,GAAA/C,KAAAH,KACZJ,0EAIN,OACE4B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACyB,EAAD,MACA3B,EAAAC,EAAAC,cAAC0B,EAAD,cATYpB,aCOEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.f0fbbc2b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass TrainingSessionForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        const data = new FormData(event.target);\r\n        var object = {};\r\n        data.forEach(function(value, key){\r\n            object[key] = value;\r\n        });\r\n        var json = JSON.stringify(object);\r\n        fetch('https://bjjtraining.herokuapp.com/trainingsessions/new', {\r\n            method: 'POST',\r\n            body: json,\r\n            headers: {\r\n                \"Content-Type\": \"application/json; charset=utf-8\",\r\n            },\r\n          });\r\n        \r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n            <label htmlFor=\"date\">Date</label>\r\n            <input id=\"date\" name=\"date\" type=\"text\"/>\r\n            <label htmlFor=\"length\">Length(min)</label>\r\n            <input id=\"lengthMin\" name=\"lengthMin\" type=\"text\" />\r\n            <label htmlFor=\"trainingType\">Training type</label>\r\n            \r\n            <input id=\"trainingType\" name=\"trainingType\" type=\"text\" />\r\n            \r\n            <button>Add session</button>\r\n            </form>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default TrainingSessionForm;","import React, { Component } from 'react';\r\n\r\nclass TrainingSessionsList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          error: null,\r\n          isLoaded: false,\r\n          sessions: []\r\n        };\r\n      }\r\n    componentDidMount() {\r\n        fetch(\"https://bjjtraining.herokuapp.com/trainingsessions\")\r\n          .then(res => res.json())\r\n          .then(\r\n            (result) => {\r\n              this.setState({\r\n                isLoaded: true,\r\n                sessions: result\r\n              });\r\n            },\r\n            // Note: it's important to handle errors here\r\n            // instead of a catch() block so that we don't swallow\r\n            // exceptions from actual bugs in components.\r\n            (error) => {\r\n              this.setState({\r\n                isLoaded: true,\r\n                error\r\n              });\r\n            }\r\n          )\r\n      }\r\n      render() {\r\n        const { error, isLoaded, sessions } = this.state;\r\n        if (error) {\r\n          return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n          return <div>Loading...</div>;\r\n        } else {\r\n          return (\r\n            <ul>\r\n              {sessions.map(session => (\r\n                <li>\r\n                  {session.id} {session.date} {session.trainingType} {session.lengthMin}\r\n                </li>\r\n              ))}\r\n            </ul>);\r\n        }\r\n      }\r\n    }\r\n    \r\n    export default TrainingSessionsList;\r\n    ","import React, { Component } from 'react';\nimport './App.css';\nimport TrainingSessionForm from './TrainingSessionForm';\nimport TrainingSessionsList from './TrainingSessionsList';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return(\n      <div>\n      <TrainingSessionForm />\n      <TrainingSessionsList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}